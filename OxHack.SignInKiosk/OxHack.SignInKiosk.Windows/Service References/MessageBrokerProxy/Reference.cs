//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace OxHack.SignInKiosk.MessageBrokerProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignInRequestSubmitted", Namespace="http://schemas.datacontract.org/2004/07/OxHack.SignInKiosk.Messaging.Messages")]
    public partial class SignInRequestSubmitted : object, System.ComponentModel.INotifyPropertyChanged {
        
        private OxHack.SignInKiosk.MessageBrokerProxy.Person PersonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OxHack.SignInKiosk.MessageBrokerProxy.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/OxHack.SignInKiosk.Messaging.Models")]
    public partial class Person : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DisplayNameField;
        
        private string TokenIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TokenId {
            get {
                return this.TokenIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenIdField, value) != true)) {
                    this.TokenIdField = value;
                    this.RaisePropertyChanged("TokenId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TokenRead", Namespace="http://schemas.datacontract.org/2004/07/OxHack.SignInKiosk.Messaging.Messages")]
    public partial class TokenRead : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonSignedIn", Namespace="http://schemas.datacontract.org/2004/07/OxHack.SignInKiosk.Messaging.Messages")]
    public partial class PersonSignedIn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private OxHack.SignInKiosk.MessageBrokerProxy.Person PersonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OxHack.SignInKiosk.MessageBrokerProxy.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonSignedOut", Namespace="http://schemas.datacontract.org/2004/07/OxHack.SignInKiosk.Messaging.Messages")]
    public partial class PersonSignedOut : object, System.ComponentModel.INotifyPropertyChanged {
        
        private OxHack.SignInKiosk.MessageBrokerProxy.Person PersonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OxHack.SignInKiosk.MessageBrokerProxy.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageBrokerProxy.IMessageBrokerProxyService", CallbackContract=typeof(OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyServiceCallback))]
    public interface IMessageBrokerProxyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/PublishSignInRequestSubmitted", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/PublishSignInRequestSubmittedRespon" +
            "se")]
        System.Threading.Tasks.Task PublishSignInRequestSubmittedAsync(OxHack.SignInKiosk.MessageBrokerProxy.SignInRequestSubmitted message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/Subscribe", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/Unsubscribe", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageBrokerProxyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnTokenReadPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnTokenReadPublishedResponse")]
        void OnTokenReadPublished(OxHack.SignInKiosk.MessageBrokerProxy.TokenRead message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedInPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedInPublishedResponse")]
        void OnPersonSignedInPublished(OxHack.SignInKiosk.MessageBrokerProxy.PersonSignedIn message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedOutPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedOutPublishedResponse")]
        void OnPersonSignedOutPublished(OxHack.SignInKiosk.MessageBrokerProxy.PersonSignedOut message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnSignInRequestSubmittedPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnSignInRequestSubmittedPublishedRe" +
            "sponse")]
        void OnSignInRequestSubmittedPublished(OxHack.SignInKiosk.MessageBrokerProxy.SignInRequestSubmitted message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageBrokerProxyServiceChannel : OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageBrokerProxyServiceClient : System.ServiceModel.DuplexClientBase<OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService>, OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetDefaultBinding(), MessageBrokerProxyServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.ServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), MessageBrokerProxyServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task PublishSignInRequestSubmittedAsync(OxHack.SignInKiosk.MessageBrokerProxy.SignInRequestSubmitted message) {
            return base.Channel.PublishSignInRequestSubmittedAsync(message);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ServiceEndpoint)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ServiceEndpoint)) {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://messagebrokerproxyservice:8137/MessageBrokerProxyService"), new System.ServiceModel.UpnEndpointIdentity("ZODASREVENGE\\yargh"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MessageBrokerProxyServiceClient.GetBindingForEndpoint(EndpointConfiguration.ServiceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MessageBrokerProxyServiceClient.GetEndpointAddress(EndpointConfiguration.ServiceEndpoint);
        }
        
        public enum EndpointConfiguration {
            
            ServiceEndpoint,
        }
    }
}
