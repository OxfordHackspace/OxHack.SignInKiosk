//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace OxHack.SignInKiosk.MessageBrokerProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageBrokerProxy.IMessageBrokerProxyService", CallbackContract=typeof(OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyServiceCallback))]
    public interface IMessageBrokerProxyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/PublishSignInRequest", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/PublishSignInRequestResponse")]
        System.Threading.Tasks.Task PublishSignInRequestAsync(OxHack.SignInKiosk.Domain.Messages.SignInRequestSubmitted message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/PublishSignOutRequest", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/PublishSignOutRequestResponse")]
        System.Threading.Tasks.Task PublishSignOutRequestAsync(OxHack.SignInKiosk.Domain.Messages.SignOutRequestSubmitted message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/Subscribe", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/Unsubscribe", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/KeepAlive", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/KeepAliveResponse")]
        System.Threading.Tasks.Task KeepAliveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageBrokerProxyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnTokenReadPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnTokenReadPublishedResponse")]
        void OnTokenReadPublished(OxHack.SignInKiosk.Domain.Messages.TokenRead message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedInPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedInPublishedResponse")]
        void OnPersonSignedInPublished(OxHack.SignInKiosk.Domain.Messages.PersonSignedIn message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedOutPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnPersonSignedOutPublishedResponse")]
        void OnPersonSignedOutPublished(OxHack.SignInKiosk.Domain.Messages.PersonSignedOut message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnSignInRequestSubmittedPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnSignInRequestSubmittedPublishedRe" +
            "sponse")]
        void OnSignInRequestSubmittedPublished(OxHack.SignInKiosk.Domain.Messages.SignInRequestSubmitted message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/OnSignOutRequestSubmittedPublished", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/OnSignOutRequestSubmittedPublishedR" +
            "esponse")]
        void OnSignOutRequestSubmittedPublished(OxHack.SignInKiosk.Domain.Messages.SignOutRequestSubmitted message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageBrokerProxyService/KeepCallbackAlive", ReplyAction="http://tempuri.org/IMessageBrokerProxyService/KeepCallbackAliveResponse")]
        void KeepCallbackAlive();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageBrokerProxyServiceChannel : OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageBrokerProxyServiceClient : System.ServiceModel.DuplexClientBase<OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService>, OxHack.SignInKiosk.MessageBrokerProxy.IMessageBrokerProxyService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetDefaultBinding(), MessageBrokerProxyServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.ServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), MessageBrokerProxyServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, MessageBrokerProxyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MessageBrokerProxyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task PublishSignInRequestAsync(OxHack.SignInKiosk.Domain.Messages.SignInRequestSubmitted message) {
            return base.Channel.PublishSignInRequestAsync(message);
        }
        
        public System.Threading.Tasks.Task PublishSignOutRequestAsync(OxHack.SignInKiosk.Domain.Messages.SignOutRequestSubmitted message) {
            return base.Channel.PublishSignOutRequestAsync(message);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public System.Threading.Tasks.Task KeepAliveAsync() {
            return base.Channel.KeepAliveAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ServiceEndpoint)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ServiceEndpoint)) {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8137/MessageBrokerProxyService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MessageBrokerProxyServiceClient.GetBindingForEndpoint(EndpointConfiguration.ServiceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MessageBrokerProxyServiceClient.GetEndpointAddress(EndpointConfiguration.ServiceEndpoint);
        }
        
        public enum EndpointConfiguration {
            
            ServiceEndpoint,
        }
    }
}
